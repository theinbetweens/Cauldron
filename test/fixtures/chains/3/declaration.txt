
        runtime_method = RuntimeMethod.new(MethodUsage.new(MethodParameter.new))
        sparky = CTestCase.new
        sparky[:params] = ['sparky']
        sparky[:output] = 6
        kel = CTestCase.new
        kel[:params] = ['kel']
        kel[:output] = 3
        test_cases = [
          sparky,kel
        ]    
        finish = Parser.run("if(runtime_method.all_pass?(test_cases))\nreturn true\nend")
        
        # Generate the head theory - this is the starting point and doesn't have any dependents
        accessors, mapping = TheoryGenerator.new.generate_accessors_and_mapping(test_cases,runtime_method,7,0)
        
        # * Generate all the possible results of this runtime method
        theory_results = TheoryGenerator.new.get_theory_results(accessors)
        
        # * Create the actual head theory
        head_theory = Theory.new([],nil,theory_results,runtime_method.copy)        
    
        intial_chain = Chain.new
        intial_chain.form_chain(head_theory,finish,mapping)
        intial_chain
      